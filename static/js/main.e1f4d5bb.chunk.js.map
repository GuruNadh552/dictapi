{"version":3,"sources":["ShowWord.js","App.js","reportWebVitals.js","index.js"],"names":["ShowWord","props","useState","word","setWord","meaning","setMeaning","pronoun","setPronoun","example","setExample","phonetics","setPhonetics","phoneturl","setPhoneturl","synonms","setSynonms","useEffect","url","axios","get","then","response","data","meanings","definitions","definition","partOfSpeech","text","audio","synonyms","submitWord","className","onClick","Audio","play","map","n","index","App","inpWord","setInpWord","exact","path","type","onChange","e","target","value","console","log","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA0DeA,MAtDf,SAAkBC,GAEd,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA6BJ,mBAAS,IAAtC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA6BN,mBAAS,IAAtC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAiCR,mBAAS,IAA1C,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAiCV,mBAAS,IAA1C,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAA6BZ,mBAAS,IAAtC,mBAAOa,EAAP,KAAeC,EAAf,KAqBA,OAPEC,qBAAU,YAbQ,WAChB,IAAMC,EAAM,sDAAsDjB,EAAME,KACvEgB,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GACnB,IAAMC,EAAOD,EAASC,KAAK,GAC3BnB,EAAQmB,EAAKpB,MACbG,EAAWiB,EAAKC,SAAS,GAAGC,YAAY,GAAGC,YAC3ClB,EAAWe,EAAKC,SAAS,GAAGG,cAC5BjB,EAAWa,EAAKC,SAAS,GAAGC,YAAY,GAAGhB,SAC3CG,EAAaW,EAAKZ,UAAU,GAAGiB,MAC/Bd,EAAaS,EAAKZ,UAAU,GAAGkB,OAC/Bb,EAAWO,EAAKC,SAAS,GAAGC,YAAY,GAAGK,aAI7CC,MAOA,mCACiB,KAAf9B,EAAME,KAAe,mBACnB,sBAAK6B,UAAU,YAAf,UACI,wCACA,4BAAI7B,IACJ,6CACA,8BAAIQ,EAAJ,IAAe,wBAAQqB,UAAU,WAAWC,QAXpC,WACJ,IAAIC,MAAMrB,GAChBsB,QASiB,qBACf,4CALJ,IAKwB,4BAAI9B,IACxB,mDANJ,IAM+B,4BAAIE,IAC/B,6CAAoB,4BAAIE,IACxB,6CACA,6BAEIM,EAAQqB,KAAI,SAACC,EAAEC,GACb,OAAQ,6BAAiBD,GAARC,c,eCVxBC,MA5Bf,WACE,MAA6BrC,mBAAS,IAAtC,mBAAOsC,EAAP,KAAeC,EAAf,KACA,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,IAAD,UACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAlB,SACA,wBAAQX,UAAU,aAAlB,SACA,sBAAKA,UAAU,WAAf,UACE,gDACA,uBAAOY,KAAK,OAAOZ,UAAU,UAAUa,SAAU,SAACC,GAAKL,EAAWK,EAAEC,OAAOC,OAAOC,QAAQC,IAAIJ,EAAEC,OAAOC,UACvG,cAAC,IAAD,CAAMG,GAAG,QAAT,SACE,wBAAQnB,UAAU,YAAlB,6BAOJ,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,CAAUxC,KAAMqC,cClBbY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e1f4d5bb.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport axios from 'axios';\nimport './App1.css';\n\nfunction ShowWord(props)\n{\n    const [word,setWord] = useState('');\n    const [meaning,setMeaning] = useState('');\n    const [pronoun,setPronoun] = useState('');\n    const [example,setExample] = useState('');\n    const [phonetics,setPhonetics] = useState('');\n    const [phoneturl,setPhoneturl] = useState('');\n    const [synonms,setSynonms] = useState([]);\n    const submitWord =  () => {\n        const url = 'https://api.dictionaryapi.dev/api/v2/entries/en_US/'+props.word;\n         axios.get(url).then(response => {\n          const data = response.data[0];\n          setWord(data.word);\n          setMeaning(data.meanings[0].definitions[0].definition);\n          setPronoun(data.meanings[0].partOfSpeech);\n          setExample(data.meanings[0].definitions[0].example);\n          setPhonetics(data.phonetics[0].text);\n          setPhoneturl(data.phonetics[0].audio);\n          setSynonms(data.meanings[0].definitions[0].synonyms);\n        })\n      }\n      useEffect(()=>{\n        submitWord();\n      })\n      const playAudio = () => {\n        let audio = new Audio(phoneturl);\n        audio.play();\n      }\n    return (\n        <>\n        {(props.word === '') ? 'Enter Valid Word':(\n            <div className=\"main-card\">\n                <h3>Word :</h3>\n                <p>{word}</p>\n                <h3>Phonetics :</h3> \n                <p>{phonetics} <button className=\"inpword1\" onClick={playAudio}>Play</button></p>\n                <h3>Meaning : </h3> <p>{meaning}</p>\n                <h3>Parts Of Speech :</h3> <p>{pronoun}</p>\n                <h3>Examples : </h3><p>{example}</p>\n                <h3>Synonyms : </h3>\n                <ul>\n                  {\n                    synonms.map((n,index)=>{\n                      return (<li key={index}>{n}</li>)\n                    })\n                  }\n                </ul>\n            </div>\n        )}\n        </>\n    )\n}\n\nexport default ShowWord;","import './App.css';\nimport React,{useState} from 'react';\nimport ShowWord from './ShowWord';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [inpWord,setInpWord] = useState('');\n  return (\n    <div className=\"App\">\n      <Router>\n      <Switch>\n          <Route exact path=\"/\">\n          <header className=\"App-header\">\n          <div className=\"App-main\">\n            <p>Enter a Word : </p>\n            <input type=\"text\" className=\"inpword\" onChange={(e)=>{setInpWord(e.target.value);console.log(e.target.value)}}/>  \n            <Link to=\"/show\">\n              <button className=\"btnsubmit\">\n                Search\n              </button>\n            </Link>\n          </div>\n        </header>\n          </Route>\n          <Route exact path=\"/show\">\n            <ShowWord word={inpWord}/>\n          </Route>\n        </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}